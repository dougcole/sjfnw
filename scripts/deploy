#!/usr/bin/env bash

green="\033[0;32m"
red="\033[0;31m"
yellow="\033[0;33m"
boldred="\033[1;31m"
bold="\033[1m"
reset="\033[0m"
sep="
                                   -----
"
ok="${green}ok$reset"
err="$sep
${boldred}X$reset "
indent="   "

cd "$(dirname "$0")/.." || exit 1

echo -ne "
                                  ABOUT

This script will deploy your code via GAE's appcfg.py, after verifying that
basic prereqs are met. You will be prompted to confirm or cancel before
deployment is started.

All files in this directory are included except for those that match a
skip_files pattern from app.yaml.

If you are not on master, this will deploy to staging version with staging env,
which uses a separate database.

Otherwise, you may enter a version when prompted. Using the default will update
the in-use live site at sjf-nw.appspot.com. Using a different version will deploy
to <version>-dot-sjf-nw.appspot.com. Keep in mind that all non-staging versions
share the same database.$sep

${bold}1. Prerequisites$reset
${indent}gcloud: "

gcloud_dir=$(which gcloud)
if [ ! "$gcloud_dir" ] ; then
  echo -ne "${red}gcloud installation not found - cannot deploy"
  exit 1
fi
gcloud_dir=${gcloud_dir%bin/gcloud}

echo -ne "$ok\n${indent}libs: "

lib_missing=0
for dir in "django" "pytz" "unicodecsv" ; do
  if [ ! -d "./libs/$dir" ] ; then
    if [ $lib_missing -eq 1 ] ; then
      echo -n ", "
    fi
    echo -ne "$red$dir not found$reset"
    lib_missing=1
  fi
done
if [ $lib_missing -gt 0 ] ; then
  echo -e "{$err}Missing one or more required libraries. Run ${bold}./scripts/install-libs$reset\n"
  exit 1
else
  echo -ne "$ok"
fi

echo -ne "\n${indent}clean git status: "
if [[ $(git status --porcelain) ]]; then
  echo -e "${red}fail$reset${err}Local uncommitted changes found. Commit or stash them before deploying.\n"
  exit 1
else
  echo -e "$ok"
fi

echo -e "\n${bold}2. Enter Cloud SQL password$reset (this will set CLOUDSQL_PASSWORD env var in prod)"
read -rp "${indent}CLOUDSQL_PASSWORD: " pw

if [ ! "$pw" ] ; then
  echo -e "${err}Cloud SQL password is required for deployment\n"
  exit 1
fi

cmd="${gcloud_dir}platform/google_appengine/appcfg.py update --env_variable=CLOUDSQL_PASSWORD:$pw"

branch=$(git status | grep -o "On branch \([a-z\-]\+\)" | grep -o "[a-z_/\-]\+$")
if [ "$branch" = "master" ] ; then
  echo -e "\n${bold}3. Enter a version$reset to deploy to. Leave blank to use default version."
  read -rp "${indent}Version: " version

  if [ ! "$version" ] ; then
    versionwarning="You are deploying to the default version which ${yellow}will update the live in-use site.$reset\n\n$indent"
  else
    cmd="$cmd --version=$version"
  fi
else
  echo -e "\n${bold}3. Not on master - deploying to staging.$reset"
  version="staging"
  cmd="$cmd --version=staging"
fi

# Finalize command with reference to current directory
cmd="$cmd ."

echo -e "
${bold}4. Confirm$reset
$indent${versionwarning}The following commands will be executed:

$indent${green}$cmd$reset
"
if [ ! "$version" ] ; then
  echo -e "$indent${green}git tag -a $(date +%Y-%m-%d) -m \"\"$reset (tag name will be incremented if necessary)\n"
fi

read -rp "Deploy? [y/N]: " confirm

if [ ! "$confirm" ] ; then
  echo -e "${err}Canceled.\n"
  exit 1
elif [ "$confirm" != "y" ] && [ "$confirm" != "Y" ] ; then
  echo -e "${err}Canceled.\n"
  exit 1
fi

eval "$cmd" || exit 1

echo "$sep"

if [ ! "$version" ] || [ "$version" = "staging" ] ; then
  for i in 0 1 2 3; do
    tag_name="$version$(date +%Y-%m-%d)"
    if [ $i -gt 0 ] ; then
      tag_name+=".$i"
    fi
    git tag -a $tag_name -m "" 2>/dev/null && echo -e "Tag created: $tag_name" && break
    if [ $i -gt 3 ] ; then
      echo -e "${red}Unable to create tag. Add one manually.$reset"
      break
    fi
  done
fi

echo -ne "
Verify that your deployment works: https://"
if [ $version ] ; then
  echo -ne "$version-dot-"
fi
echo -e "sjf-nw.appspot.com\n"
